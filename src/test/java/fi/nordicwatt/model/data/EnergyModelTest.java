package fi.nordicwatt.model.data;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import fi.nordicwatt.model.data.EnergyModel;
import fi.nordicwatt.types.DataType;
import fi.nordicwatt.types.MeasurementUnit;

/**
 * @author generated by github copilot
 */
public class EnergyModelTest {

    @Test
    public void testEnergyModel() {
        
        EnergyModel model = 
            new EnergyModel(
                DataType.CONSUMPTION,
                MeasurementUnit.MEGA_WATT_HOUR,
                "2021-01-01 00:00:00",
                new Double[] { 1.0, 2.0, 3.0 });
                
        assertEquals(DataType.CONSUMPTION, model.getDataType());
        assertEquals(MeasurementUnit.MEGA_WATT_HOUR, model.getUnit());
        // assertEquals("2021-01-01 00:00:00", model.getFirstEntryTimestamp());
        assertEquals(3, model.getDataPoints().size());
        assertEquals(1.0, model.getDataPoints().get("2021-01-01 00:00:00"));
        assertEquals(2.0, model.getDataPoints().get("2021-01-01 01:00:00"));
        assertEquals(3.0, model.getDataPoints().get("2021-01-01 02:00:00"));
    }

    // Test all possible data types
    @Test
    public void testEnergyModelDataTypes() {
        EnergyModel model = new EnergyModel(DataType.CONSUMPTION, MeasurementUnit.MEGA_WATT_HOUR);
        assertEquals(DataType.CONSUMPTION, model.getDataType());

        model = new EnergyModel(DataType.PRODUCTION, MeasurementUnit.MEGA_WATT_HOUR);
        assertEquals(DataType.PRODUCTION, model.getDataType());

        //TODO implement more datatype tests as they are added to DataTypes
    }

    // Test that values added are correct
    @Test
    public void testAddDataPoint() {
        EnergyModel model = new EnergyModel(DataType.CONSUMPTION, MeasurementUnit.MEGA_WATT_HOUR);
        model.addDataPoint("2021-01-01 00:00:00", 1.0);
        model.addDataPoint("2021-01-01 01:00:00", 2.0);
        model.addDataPoint("2021-01-01 02:00:00", 3.0);
        assertEquals(3, model.getDataPoints().size());
        assertEquals(1.0, model.getDataPoints().get("2021-01-01 00:00:00"));
        assertEquals(2.0, model.getDataPoints().get("2021-01-01 01:00:00"));
        assertEquals(3.0, model.getDataPoints().get("2021-01-01 02:00:00"));
    }

    // Test that returned map is correct, without range
    @Test
    public void testGetDataPoints() {
        EnergyModel model = new EnergyModel(DataType.CONSUMPTION, MeasurementUnit.MEGA_WATT_HOUR, "2021-01-01 00:00:00", new Double[] { 1.0, 2.0, 3.0 });
        assertEquals(3, model.getDataPoints().size());
        assertEquals(1.0, model.getDataPoints().get("2021-01-01 00:00:00"));
        assertEquals(2.0, model.getDataPoints().get("2021-01-01 01:00:00"));
        assertEquals(3.0, model.getDataPoints().get("2021-01-01 02:00:00"));
    }

    // Test that returned map is correct, with range
    @Test
    public void testGetDataPointsWithRange() {
        EnergyModel model = new EnergyModel(DataType.CONSUMPTION, MeasurementUnit.MEGA_WATT_HOUR, "2021-01-01 00:00:00", new Double[] { 1.0, 2.0, 3.0 });
        assertEquals(3, model.getDataPointsWithRange("2021-01-01 00:00:00", "2021-01-01 02:00:00").size());
        assertEquals(1.0,
                model.getDataPointsWithRange("2021-01-01 00:00:00", "2021-01-01 02:00:00").get("2021-01-01 00:00:00"));
        assertEquals(2.0,
                model.getDataPointsWithRange("2021-01-01 00:00:00", "2021-01-01 02:00:00").get("2021-01-01 01:00:00"));
        assertEquals(3.0,
                model.getDataPointsWithRange("2021-01-01 00:00:00", "2021-01-01 02:00:00").get("2021-01-01 02:00:00"));
    }
}
